apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ .Values.replica.name}}"
  labels:
    name: "{{ .Values.replica.name}}"
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/created": {{.Release.Time.Seconds | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: "{{.Values.replica.name}}"
  {{- if .Values.primary.nodeSelector }}
  nodeSelector:
    {{- range $key, $val := .Values.primary.nodeSelector }}
    {{ $key }}: {{ $val | quote }}
    {{- end}}
  {{- end }}
  template:
    metadata:
      labels:
        name: "{{.Values.replica.name}}"
      name: "{{.Values.replica.name}}"
    spec:
      containers:
      - env:
        - name: PGHOST
          value: /tmp
        - name: PG_PRIMARY_HOST
          value: "{{.Values.primary.name}}"
        - name: PGDATA_PATH_OVERRIDE
          value: replica-deployment
        - name: PG_MODE
          value: replica
        - name: PG_PRIMARY_PORT
          value: "{{.Values.container.port}}"
        - name: PG_USER
          valueFrom: 
            secretKeyRef:
              key: PG_USER
              name: pgprimary-secret
        - name: PG_PASSWORD
          valueFrom: 
            secretKeyRef:
              key: PG_PASSWORD
              name: pgprimary-secret
        - name: PG_DATABASE
          valueFrom: 
            secretKeyRef:
              key: PG_DATABASE
              name: pgprimary-secret
        - name: PG_PRIMARY_USER
          valueFrom: 
            secretKeyRef:
              key: PG_PRIMARY_USER
              name: pgprimary-secret
        - name: PG_PRIMARY_PASSWORD
          valueFrom: 
            secretKeyRef:
              key: PG_PRIMARY_PASSWORD
              name: pgprimary-secret
        - name: PG_ROOT_PASSWORD
          valueFrom: 
            secretKeyRef:
              key: PG_ROOT_PASSWORD
              name: pgprimary-secret
        resources:
          requests:
            cpu: {{ .Values.replica.resources.cpu }}
            memory: {{ .Values.replica.resources.memory }}
        image: "{{.Values.image.repository}}/{{.Values.image.postgres}}:{{.Values.image.tag}}"
        imagePullPolicy: IfNotPresent
        name: "{{.Values.replica.name}}"
        readinessProbe:
          exec:
            command:
            - "/opt/cpm/bin/readiness.sh"
          initialDelaySeconds: 40
          timeoutSeconds: 2
        livenessProbe:
          exec:
            command:
            - "/opt/cpm/bin/liveness.sh"
          initialDelaySeconds: 40
          timeoutSeconds: 2
        ports:
        - containerPort: {{.Values.container.port}}
          protocol: TCP
        volumeMounts:
        - mountPath: /pgdata
          name: pgdata
        - mountPath: /pgconf
          name: primary-deployment-pgconf
        - name: host-time
          mountPath: /etc/localtime
      securityContext: 
        fsGroup: 26
      terminationGracePeriodSeconds: 30
      volumes:
      - name: primary-deployment-pgconf
        configMap:
          name: primary-deployment-pgconf
      - name: host-time
        hostPath:
          path: /etc/localtime
  volumeClaimTemplates: 
  - metadata:
      name: "pgdata"
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.replica.pvc.storageClassName }}
      resources:
        requests:
          storage: {{.Values.container.storage}}